<?php
/**
 * @file models_forms.module.
 */
require_once 'models_forms.request.inc';
require_once 'models_forms.publish.inc';
require_once 'models_forms.contactus.inc';
require_once 'models_forms.canceljob.inc';
require_once 'models_forms.completejob.inc';
require_once 'models_forms.pausejob.inc';
require_once 'models_forms.confirm_clients.inc';


/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
// function models_forms_wysiwyg_editor_settings_alter(&$settings, $context) {
//   if ($context['profile']->editor == 'tinymce') {
//     $settings['skin'] = 'o2k7';
//     $settings['skin_variant'] = 'silver';
//   }
// }

function models_forms_init() {
  module_load_include('inc', 'user', 'user.pages');
  module_load_include('inc', 'node', 'node.pages');
}

/**
 * Implements hook_menu().
 */
function models_forms_menu() {
  $items['listing/add'] = array(
    'title' => 'Your Yoga Listing',
    'page callback' => 'models_forms_listing_add',
    'access callback' => 'user_is_logged_in',
    'file' => 'models_forms.create.inc',
  );
  $items['listing/%/edit'] = array(
    'title' => 'Your Yoga Listing',
    'page callback' => 'models_forms_listing_add',
    'page arguments' => array(1),
    'access callback' => 'yf_user_plan_lookup',
    'access arguments' => array(1),
    'file' => 'models_forms.create.inc',
  );

  $items['listing/instagram/%/edit'] = array(
    'title' => 'Your Yoga Listing',
    'page callback' => 'models_forms_instagram_add',
    'page arguments' => array(2),
    'access callback' => 'yf_user_plan_lookup',
    'access arguments' => array(2),
    'file' => 'models_forms.create.inc',
  );

  $items['instagram_auth'] = array(
    'title' => 'Your Yoga Listing',
    'page callback' => 'models_forms_instagram_auth',
    'access callback' => 'user_is_logged_in',
    'file' => 'models_forms.create.inc',
  );

  $items['event/add'] = array(
    'title' => 'Your Yoga Listing',
    'page callback' => 'models_forms_listing_add',
    'access callback' => 'user_is_logged_in',
    'file' => 'models_forms.create.inc',
  );

  $items['event/%/edit'] = array(
    'title' => 'Your Yoga Listing',
    'page callback' => 'models_forms_listing_add',
    'page arguments' => array(1),
    'access callback' => 'yf_user_plan_lookup',
    'access arguments' => array(1),
    'file' => 'models_forms.create.inc',
  );

  $items['classes/add'] = array(
    'title' => 'Add a Class to Your Listing',
    'page callback' => 'models_forms_class_add',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    'file' => 'models_forms.yoga_classes.inc',
  );
  $items['classes/%/edit'] = array(
    'title' => 'Edit your Yoga Class',
    'page callback' => 'models_forms_class_add',
    'page arguments' => array(2),
    'access callback' => 'yf_user_plan_lookup_eck',
    'access arguments' => array(1),
    'file' => 'models_forms.yoga_classes.inc',
  );

  $items['post/add'] = array(
    'title' => 'Create a Post',
    'page callback' => 'models_forms_blog_add',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    'file' => 'models_forms.yoga_blog.inc',
  );
  $items['post/%/edit'] = array(
    'title' => 'Edit your Post',
    'page callback' => 'models_forms_blog_add',
    'page arguments' => array(1),
    'access callback' => 'yf_user_plan_lookup',
    'access arguments' => array(1),
    'file' => 'models_forms.yoga_blog.inc',
  );

  $items['teacher/add'] = array(
    'title' => 'Add a Teacher to Your Listing',
    'page callback' => 'models_forms_teacher_add',
    'access callback' => 'user_is_logged_in',
    'file' => 'models_forms.yoga_teachers.inc',
  );
  $items['teacher/%/edit'] = array(
    'title' => 'Edit your Teacher',
    'page callback' => 'models_forms_teacher_add',
    'page arguments' => array(1),
    'access callback' => 'yf_user_plan_lookup_eck',
    'access arguments' => array(1),
    'file' => 'models_forms.yoga_teachers.inc',
  );

  $items['user/personal-information/settings'] = array(
    'title' => 'Personal Information',
    'page callback' => 'models_forms_personal_info',
    // 'page arguments' =>  array('models_forms_personal_information_form', 2),
    'access callback' => 'user_is_logged_in',
    'file' => 'models_forms.personal_information.inc',
  );
  $items['user/account/settings'] = array(
    'title' => 'Profile Settings',
    'page callback' => 'models_forms_account_settings',
    'access callback' => 'user_is_logged_in',
    'file' => 'models_forms.personal_information.inc',
  );

  $items['user/plan/settings'] = array(
    'title' => 'Subscription Settings',
    'page callback' => 'models_forms_subscription_settings',
    'access callback' => 'user_is_logged_in',
    'file' => 'models_forms.personal_information.inc',
  );
  $items['user/plan/invoices'] = array(
    'title' => 'Invoices',
    'page callback' => 'models_forms_invoice_settings',
    'access callback' => 'user_is_logged_in',
    'file' => 'models_forms.personal_information.inc',
  );

  $items['user/interests/settings'] = array(
    'title' => 'Your Interests',
    'page callback' => 'models_forms_interests',
    'access callback' => 'user_is_logged_in',
    'file' => 'models_forms.personal_information.inc',
  );
  return $items;
}

// YF user permissions based on plan.
function yf_user_plan_lookup($nid) {
  if (user_is_logged_in()) {
    global $user;
    if (in_array('administrator', $user->roles)) {
      return TRUE;
    }
    $nw = entity_metadata_wrapper('node', $nid);
    if ($user->uid == $nw->author->getIdentifier()) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

// YF user permissions based on plan.
function yf_user_plan_lookup_eck($eid) {
  if (user_is_logged_in()) {
    global $user;
    if (in_array('administrator', $user->roles)) {
      return TRUE;
    }
    $ew = entity_metadata_wrapper('class', $eid);
    if ($user->uid == $ew->uid->getIdentifier()) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_entity_insert().
 */
function models_forms_entity_insert($entity, $type) {
  // Save the class id to the yoga listing.
  if ($type == 'class') {
    if ($entity->type == 'teacher') {
      $ew = entity_metadata_wrapper('class', $entity);
      $nw = entity_metadata_wrapper('node', $ew->uid->field_my_listings->value()[0]->nid);
      if (!$nw->field_yoga_teachers->value()) {
        $nw->field_yoga_teachers->offsetSet(0, $ew->getIdentifier());
      }
      else {
        $nw->field_yoga_teachers->offsetSet(sizeof($nw->field_yoga_teachers->value()), $ew->getIdentifier());
      }
      $nw->save();
    }
    if ($entity->type == 'yoga') {
      $ew = entity_metadata_wrapper('class', $entity);
      $nw = entity_metadata_wrapper('node', $ew->uid->field_my_listings->value()[0]->nid);
      if (!$nw->field_yoga_classes->value()) {
        $nw->field_yoga_classes->offsetSet(0, $ew->getIdentifier());
      }
      else {
        $nw->field_yoga_classes->offsetSet(sizeof($nw->field_yoga_classes->value()), $ew->getIdentifier());
      }
      $nw->save();
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function models_forms_theme($existing, $type, $theme, $path) {
  return array(
    'overwrite_user_login' => array(
      'render element' => 'form',
      'template' => 'templates/login-form'
    ),
    'overwrite_instagram_form' => array(
      'render element' => 'form',
      'template' => 'templates/instagram-form'
    ),
    'stripe_subscription_page' => array(
      'template' => 'templates/stripe-subscription-form',
    ),
    'stripe_invoice_page' => array(
      'template' => 'templates/stripe-invoice-page',
    ),
    'overwrite_create_job' => array(
      'render element' => 'form',
      'template' => 'templates/create-job'
    ),
    'overwrite_listing_form' => array(
      'render element' => 'form',
      'template' => 'templates/add-listing'
    ),
    'overwrite_event_form' => array(
      'render element' => 'form',
      'template' => 'templates/add-event'
    ),
    'overwrite_classes_form' => array(
      'render element' => 'form',
      'template' => 'templates/add-classes'
    ),
  );
}

function models_forms_hook_theme($existing, $type, $theme, $path) {
  return array(
    'overwrite_user_login' => array(
      'render element' => 'form',
      'template' => 'form--user_login',
      'path' => $path . '/templates',
    ),
    'overwrite_create_job' => array(
      'render element' => 'form',
      'template' => 'form--create_job',
      'path' => $path . '/templates',
    ),
    'overwrite_listing_form' => array(
      'render element' => 'form',
      'template' => 'form--add_listing',
      'path' => $path . '/templates',
    ),
    'overwrite_event_form' => array(
      'render element' => 'form',
      'template' => 'form--event_listing',
      'path' => $path . '/templates',
    ),
    'overwrite_classes_form' => array(
      'render element' => 'form',
      'template' => 'form--add_classes',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Template preprocess for stripe_invoices_page.
 */
function template_preprocess_stripe_invoice_page(&$vars) {

  $header = array('Payment date', 'Plan', 'Download');
  $row[] = array(
    'DD/MM/YY',
    'premium plan payment',
    l('view invoice <i class="material-icons">trending_flat</i>', '', array('html' => TRUE, 'attributes' => array('class' => array('a-link link-go')))));

  $variables = array(
    'header' => $header,
    'rows' => $row,
//    'attributes' => array(),
//    'caption' => array(),
//    'empty' => array(),
//    'colgroups' => array(),
//    'sticky' => array(),
  );
  $vars['invoice_table'] = theme('table', $variables);

}

/**
 * Template preprocess for stripe_subscription_page.
 */
function template_preprocess_stripe_subscription_page(&$vars) {
  global $user;
  $uw = entity_metadata_wrapper('user', $user->uid);
  $current_plan = '<ul>';

  $params = drupal_get_query_parameters();
  if (isset($params['complete'])) {
    if ($params['complete'] == 1) {
      $vars['tavmuch'] = '<p class="greenify">' . t('Your payment was received - you are now signed up to the YogaFind <strong>premium</strong> plan') . '</p>';
    }
  }

  if ($uw->field_yf_trial_ended->value()) {
    switch ($uw->field_yf_subscription->value()) {
      case 'premium':
        $pricing_deets = t('Premium @ £5.50 p/month');
        break;
      case 'free':
        $pricing_deets = t('Free');
        break;
    }
  }
  else {
    $pricing_deets = t(' Premium @ 3 months free (# days remaining)');
  }

  $current_plan .= '<li>' . t('<strong>Current plan:</strong> !plan', array('!plan' => $pricing_deets)) . '</li>';
  $current_plan .= '<li>' . t('<strong>Last payment:</strong> !date', array('!date' => 'DD/MM/YYYY')) . '</li>';
  $current_plan .= '<li>' . t('<strong>Next payment:</strong> !date', array('!date' => 'DD/MM/YYYY')) . '</li>';
  $current_plan .= '<li>' . t('<strong>Invoices:</strong> !here', array('!here' => l('Show invoices', 'user/personal-information/invoices', array('attributes' => array('class' => array('a-link')))))) . '</li>';
  $current_plan .= $uw->field_stripe_reference->value() ? '<li>' . t('<strong>Customer ID:</strong> !cust_id', array('!cust_id' => $uw->field_stripe_reference->value())) . '</li>' : '';
  $current_plan .= '</ul>';
  $vars['current_plan'] = $current_plan;


  if (!$uw->field_stripe_reference->value()) {
    // If looking to upgrade from FREE or make initial payment >>
    if ($uw->field_yf_subscription->value() == 'free' || !$uw->field_yf_trial_ended->value()) {

      if (!$uw->field_yf_trial_ended->value()) {
        $form_markup = '<p>' . t('To continue using the YogaFind <strong>premium</strong> plan, please make your payment below:') . '</p>';
        $label_txt = t('Sign up for YogaFind premium');
      }
      else {
        $form_markup = '<p>' . t('To upgrade your free plan to YogaFind <strong>premium</strong>, please make your payment below:') . '</p>';
        $label_txt = t('Upgrade to YogaFind premium plan');
      }

      $form_markup .= '<form action="/user/subscribe/premium" method="POST">
        <script src="https://checkout.stripe.com/checkout.js" class="stripe-button"
          data-key="pk_test_hrBsyqolapbKL4ukf6SMTlNh"
          data-image=""
          data-name="' . t('Premium') . '"
          data-description="' . t('Sign up for a premium account') . '"
          data-amount="550"
          data-label="' . $label_txt . '"
          data-currency="gbp">
        </script>
      </form>';
      $vars['make_payment'] = $form_markup;
    }
  }

  // If looking to cancel >>
  if (1 == 1) {

//    $form_markup = '<p>' . t('To cancel your current plan and downgrade to a free plan:') . '</p>';

    $form_markup = l('<i class="fa fa-close"></i> Cancel my subscription', 'cancel-link', array(
      'html' => TRUE,
      'attributes' => array('class' => array('btn btn-sm btn-danger'))
    ));
    $vars['cancel_payment'] = $form_markup;
  }


//  $vars['stripe_form'] = $premium_markup;
}

/*
** Implements hook_mail().
*/
function models_forms_mail($key, &$message, $params) {
  switch ($key) {
    case 'models_forms_contactus_mail':
      $message['subject'] = 'CONTACT FORM - ' . $params['option'];
      $message['body'][] = $params['name'] . ' - ' . $params['email'] . ' - ' . $params['option'] . ' - ' . $params['msg'];
      break;

    // case 'pwc_form_send_addbook_msg':
    //   $headers = array(
    //     'MIME-Version' => '1.0',
    //     'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
    //     'Content-Transfer-Encoding' => '8Bit',
    //     'X-Mailer' => 'Drupal',
    //   );
    //   $message['subject'] = t('You have received a message');
    //   $message['body'][] = $params['body'];
    // break;
  }
}


function models_forms_node_presave($node) {
  global $user;
//
//  if ($node->type == 'article') {
//    if ($type = variable_get('blog_add_' . $user->uid)) {
//      $node->uid = $user->uid;
//      variable_del('blog_add_' . $user->uid);
//    }
//  }

  if ($node->type == 'yoga') {

    // Set yoga type
    if (isset($node->field_yoga_event_type[LANGUAGE_NONE][0]) || isset($node->field_yoga_event_price[LANGUAGE_NONE][0])) {
      $node->field_yoga_type[LANGUAGE_NONE][0]['value'] = 'event';
    }

    // Set up the LAT LNG.
    include_once DRUPAL_ROOT . '/includes/locale.inc';
    $countries = country_get_list();
    $add = '';
    $add .= !empty($node->field_yoga_location[LANGUAGE_NONE][0]['thoroughfare']) ? $node->field_yoga_location[LANGUAGE_NONE][0]['thoroughfare'] . ' ' : FALSE;
    $add .= !empty($node->field_yoga_location[LANGUAGE_NONE][0]['premise']) ? $node->field_yoga_location[LANGUAGE_NONE][0]['premise'] . ', ' : FALSE;
    $add .= !empty($node->field_yoga_location[LANGUAGE_NONE][0]['locality']) ? $node->field_yoga_location[LANGUAGE_NONE][0]['locality'] . ', ' : FALSE;
    $add .= !empty($node->field_yoga_location[LANGUAGE_NONE][0]['dependent_locality']) ? $node->field_yoga_location[LANGUAGE_NONE][0]['dependent_locality'] . ', ' : FALSE;
    $add .= !empty($node->field_yoga_location[LANGUAGE_NONE][0]['administrative_locality']) ? $node->field_yoga_location[LANGUAGE_NONE][0]['administrative_locality'] . ', ' : FALSE;
    $add .= !empty($node->field_yoga_location[LANGUAGE_NONE][0]['postal_code']) ? $node->field_yoga_location[LANGUAGE_NONE][0]['postal_code'] . ', ' : FALSE;
    $add .= !empty($node->field_yoga_location[LANGUAGE_NONE][0]['country']) ? $countries[$node->field_yoga_location[LANGUAGE_NONE][0]['country']] : FALSE;
    $add = str_replace(' , ', ', ', $add);
    $add = str_replace(',,', ',', $add);

    // If we're about to save a new yoga node > run the geocode.
    if (!$node->nid) {
      if ($add) {
        $geo_array = tweaks_grab_geocode($add, $node);
        $node->field_yoga_latlng[LANGUAGE_NONE][0] = $geo_array;
      }
    }
    // Else check to see if the cached add is different to the new one - if yes, geocode that geezer.
    else {
      $original_add = models_cache_get_job_latlon_cache($node->nid);
      if ($original_add != md5($add)) {
        if ($add) {
          $geo_array = tweaks_grab_geocode($add, $node);
          $node->field_yoga_latlng[LANGUAGE_NONE][0] = $geo_array;
        }
      }
    }
  }
}

function models_forms_node_insert($node) {
  global $user;
  if ($node->type == 'yoga') {
    if ($node->field_yoga_type[LANGUAGE_NONE][0]['value'] != 'event') {
      $uw = entity_metadata_wrapper('user', $user->uid);
      $nw = entity_metadata_wrapper('node', $node->nid);

      // To use in the future to save more than one listing?
//      if (!$uw->field_my_listings->value()) {
//        $uw->field_my_listings->offsetSet(0, $node->nid);
//      }
//      else {
//        $uw->field_my_listings->offsetSet(sizeof($uw->field_my_listings->value()), $node->nid);
//      }

      // Add the yoga listing to the user's profile.
      $uw->field_my_listings->offsetSet(0, $node->nid);
      $uw->save();
    }

    if ($node->field_yoga_type[LANGUAGE_NONE][0]['value'] == 'event') {

      $uw = entity_metadata_wrapper('user', $user->uid);
      $nw = entity_metadata_wrapper('node', $uw->field_my_listings->value()[0]->nid);

//      $evw = entity_metadata_wrapper('node', $node->nid);
//      models_forms_listing_add_submit($evw);
//      // Add the yoga event to the yoga listing.
      if (!$nw->field_yoga_event_list->value()) {
        $nw->field_yoga_event_list->offsetSet(0, $node->nid);
      }
      else {
        $nw->field_yoga_event_list->offsetSet(sizeof($nw->field_yoga_event_list->value()), $node->nid);
      }
      $nw->save();
    }

  }
  if ($node->type == 'article') {
    $uw = entity_metadata_wrapper('user', $user->uid);
    if (!$uw->field_my_posts->value()) {
      $uw->field_my_posts->offsetSet(0, $node->nid);
    }
    else {
      $uw->field_my_posts->offsetSet(sizeof($uw->field_my_posts->value()), $node->nid);
    }
    $uw->save();
  }
}